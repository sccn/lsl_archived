/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include "../../liblsl/include/lsl_cpp.h"
using namespace lsl;


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>

SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long >::const_reference std_vector_Sl_long_Sg__get(std::vector< long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector< long > *self,int i,std::vector< long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< short >::const_reference std_vector_Sl_short_Sg__get(std::vector< short > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_short_Sg__set(std::vector< short > *self,int i,std::vector< short >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< lsl::stream_info >::const_reference std_vector_Sl_lsl_stream_info_Sg__get(std::vector< lsl::stream_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_lsl_stream_info_Sg__set(std::vector< lsl::stream_info > *self,int i,std::vector< lsl::stream_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_IRREGULAR_1RATE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)lsl::IRREGULAR_RATE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_DEDUCED_1TIMESTAMP_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)lsl::DEDUCED_TIMESTAMP;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_FOREVER_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)lsl::FOREVER;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1float32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_float32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1double64_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_double64;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1string_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_string;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1int32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_int32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1int16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_int16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1int8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_int8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1int64_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_int64;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_cf_1undefined_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::channel_format_t)lsl::cf_undefined;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_protocol_1version(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)lsl::protocol_version();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_library_1version(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)lsl::library_version();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_local_1clock(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)lsl::local_clock();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jdouble jarg4, jint jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  lsl::channel_format_t arg5 ;
  std::string *arg6 = 0 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (lsl::channel_format_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (lsl::stream_info *)new lsl::stream_info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jdouble jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  lsl::channel_format_t arg5 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (lsl::channel_format_t)jarg5; 
  result = (lsl::stream_info *)new lsl::stream_info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (lsl::stream_info *)new lsl::stream_info((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (lsl::stream_info *)new lsl::stream_info((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (lsl::stream_info *)new lsl::stream_info((std::string const &)*arg1,(std::string const &)*arg2);
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (std::string *) &((lsl::stream_info const *)arg1)->name();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (std::string *) &((lsl::stream_info const *)arg1)->type();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1channel_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (int)((lsl::stream_info const *)arg1)->channel_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1nominal_1srate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (double)((lsl::stream_info const *)arg1)->nominal_srate();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1channel_1format(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  lsl::channel_format_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (lsl::channel_format_t)((lsl::stream_info const *)arg1)->channel_format();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1source_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (std::string *) &((lsl::stream_info const *)arg1)->source_id();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (int)((lsl::stream_info const *)arg1)->version();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1created_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (double)((lsl::stream_info const *)arg1)->created_at();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1uid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (std::string *) &((lsl::stream_info const *)arg1)->uid();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1session_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (std::string *) &((lsl::stream_info const *)arg1)->session_id();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1hostname(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (std::string *) &((lsl::stream_info const *)arg1)->hostname();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1desc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (arg1)->desc();
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1as_1xml(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (arg1)->as_xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1channel_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (int)((lsl::stream_info const *)arg1)->channel_bytes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1sample_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (int)((lsl::stream_info const *)arg1)->sample_bytes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1info_1impl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  stream_info_impl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1; 
  result = (stream_info_impl *)(arg1)->impl();
  *(stream_info_impl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  stream_info_impl *arg1 = (stream_info_impl *) 0 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(stream_info_impl **)&jarg1; 
  result = (lsl::stream_info *)new lsl::stream_info((stream_info_impl const *)arg1);
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_17(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::stream_info *)new lsl::stream_info();
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1info_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  lsl::stream_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  result = (lsl::stream_info *)new lsl::stream_info((lsl::stream_info const &)*arg1);
  *(lsl::stream_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1stream_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lsl::stream_info *arg1 = (lsl::stream_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lsl::stream_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1outlet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  lsl::stream_outlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (lsl::stream_outlet *)new lsl::stream_outlet((lsl::stream_info const &)*arg1,arg2,arg3);
  *(lsl::stream_outlet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1outlet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  int arg2 ;
  lsl::stream_outlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (lsl::stream_outlet *)new lsl::stream_outlet((lsl::stream_info const &)*arg1,arg2);
  *(lsl::stream_outlet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1outlet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  lsl::stream_outlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  result = (lsl::stream_outlet *)new lsl::stream_outlet((lsl::stream_info const &)*arg1);
  *(lsl::stream_outlet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< float > *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::vector< float > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< float > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::vector< float > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > const & reference is null");
    return ;
  } 
  (arg1)->push_sample((std::vector< float > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::vector< double > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::vector< double > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  (arg1)->push_sample((std::vector< double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< long > *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::vector< long > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< long > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::vector< long > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< long > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long > const & reference is null");
    return ;
  } 
  (arg1)->push_sample((std::vector< long > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< int > *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::vector< int > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< int > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::vector< int > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  (arg1)->push_sample((std::vector< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< short > *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< short > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::vector< short > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< short > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< short > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::vector< short > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< short > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< short > const & reference is null");
    return ;
  } 
  (arg1)->push_sample((std::vector< short > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< char > *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::vector< char > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< char > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::vector< char > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  (arg1)->push_sample((std::vector< char > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::vector< std::string > const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::vector< std::string > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->push_sample((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  float *arg2 = (float *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((float const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  float *arg2 = (float *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((float const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  float *arg2 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  (arg1)->push_sample((float const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((double const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((double const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->push_sample((double const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  long *arg2 = (long *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(long **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((long const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  long *arg2 = (long *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(long **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((long const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  long *arg2 = (long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(long **)&jarg2; 
  (arg1)->push_sample((long const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  int *arg2 = (int *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((int const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  int *arg2 = (int *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((int const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  (arg1)->push_sample((int const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  short *arg2 = (short *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((short const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  short *arg2 = (short *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((short const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  short *arg2 = (short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  (arg1)->push_sample((short const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_140(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->push_sample((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_141(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->push_sample((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_142(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_sample((std::string const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_143(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->push_sample((std::string const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1sample_1_1SWIG_144(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  (arg1)->push_sample((std::string const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1numeric_1raw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  void *arg2 = (void *) 0 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->push_numeric_raw(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1numeric_1raw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  void *arg2 = (void *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->push_numeric_raw(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1push_1numeric_1raw_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  (arg1)->push_numeric_raw(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1have_1consumers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  result = (bool)(arg1)->have_consumers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1wait_1for_1consumers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->wait_for_consumers(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1outlet_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  lsl::stream_info result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  result = ((lsl::stream_outlet const *)arg1)->info();
  *(lsl::stream_info **)&jresult = new lsl::stream_info((const lsl::stream_info &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1stream_1outlet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lsl::stream_outlet *arg1 = (lsl::stream_outlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lsl::stream_outlet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1streams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = lsl::resolve_streams(arg1);
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1streams_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  result = lsl::resolve_streams();
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1stream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = lsl::resolve_stream((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1stream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = lsl::resolve_stream((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1stream_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = lsl::resolve_stream((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1stream_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = lsl::resolve_stream((std::string const &)*arg1,arg2,arg3);
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1stream_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = lsl::resolve_stream((std::string const &)*arg1,arg2);
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_resolve_1stream_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = lsl::resolve_stream((std::string const &)*arg1);
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1continuous_1resolver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  lsl::continuous_resolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (lsl::continuous_resolver *)new lsl::continuous_resolver(arg1);
  *(lsl::continuous_resolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1continuous_1resolver_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lsl::continuous_resolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::continuous_resolver *)new lsl::continuous_resolver();
  *(lsl::continuous_resolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1continuous_1resolver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  lsl::continuous_resolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  result = (lsl::continuous_resolver *)new lsl::continuous_resolver((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(lsl::continuous_resolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1continuous_1resolver_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  lsl::continuous_resolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (lsl::continuous_resolver *)new lsl::continuous_resolver((std::string const &)*arg1,(std::string const &)*arg2);
  *(lsl::continuous_resolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1continuous_1resolver_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  double arg2 ;
  lsl::continuous_resolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  result = (lsl::continuous_resolver *)new lsl::continuous_resolver((std::string const &)*arg1,arg2);
  *(lsl::continuous_resolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1continuous_1resolver_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  lsl::continuous_resolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (lsl::continuous_resolver *)new lsl::continuous_resolver((std::string const &)*arg1);
  *(lsl::continuous_resolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_continuous_1resolver_1results(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::continuous_resolver *arg1 = (lsl::continuous_resolver *) 0 ;
  std::vector< lsl::stream_info > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::continuous_resolver **)&jarg1; 
  result = (arg1)->results();
  *(std::vector< lsl::stream_info > **)&jresult = new std::vector< lsl::stream_info >((const std::vector< lsl::stream_info > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1continuous_1resolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lsl::continuous_resolver *arg1 = (lsl::continuous_resolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lsl::continuous_resolver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1inlet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  lsl::stream_inlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (lsl::stream_inlet *)new lsl::stream_inlet((lsl::stream_info const &)*arg1,arg2,arg3,arg4);
  *(lsl::stream_inlet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1inlet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  lsl::stream_inlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (lsl::stream_inlet *)new lsl::stream_inlet((lsl::stream_info const &)*arg1,arg2,arg3);
  *(lsl::stream_inlet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1inlet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  int arg2 ;
  lsl::stream_inlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (lsl::stream_inlet *)new lsl::stream_inlet((lsl::stream_info const &)*arg1,arg2);
  *(lsl::stream_inlet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1stream_1inlet_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_info *arg1 = 0 ;
  lsl::stream_inlet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::stream_info const & reference is null");
    return 0;
  } 
  result = (lsl::stream_inlet *)new lsl::stream_inlet((lsl::stream_info const &)*arg1);
  *(lsl::stream_inlet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1stream_1inlet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  double arg2 ;
  lsl::stream_info result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->info(arg2);
  *(lsl::stream_info **)&jresult = new lsl::stream_info((const lsl::stream_info &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  lsl::stream_info result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  result = (arg1)->info();
  *(lsl::stream_info **)&jresult = new lsl::stream_info((const lsl::stream_info &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1open_1stream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->open_stream(arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1open_1stream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  (arg1)->open_stream();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1close_1stream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  (arg1)->close_stream();
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1time_1correction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->time_correction(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1time_1correction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  result = (double)(arg1)->time_correction();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< float > *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->pull_sample(*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< float > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->pull_sample(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->pull_sample(*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< double > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->pull_sample(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< long > *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long > & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->pull_sample(*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< long > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< long > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< long > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->pull_sample(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< int > *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->pull_sample(*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< int > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->pull_sample(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< short > *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< short > & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->pull_sample(*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< short > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< short > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->pull_sample(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< char > *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->pull_sample(*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< char > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->pull_sample(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->pull_sample(*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->pull_sample(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_sample(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_sample(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_sample(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_sample(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  long *arg2 = (long *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(long **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_sample(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  long *arg2 = (long *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(long **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_sample(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_sample(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_sample(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  short *arg2 = (short *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_sample(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  short *arg2 = (short *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_sample(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_sample(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_sample(arg2,arg3);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_sample(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1sample_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_sample(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1numeric_1raw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->pull_numeric_raw(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1pull_1numeric_1raw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->pull_numeric_raw(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1samples_1available(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  result = (arg1)->samples_available();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_stream_1inlet_1was_1clock_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  lsl::stream_inlet *arg1 = (lsl::stream_inlet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::stream_inlet **)&jarg1; 
  result = (bool)(arg1)->was_clock_reset();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1xml_1element_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  lsl::xml_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (lsl::xml_element *)new lsl::xml_element();
  *(lsl::xml_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1xml_1element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  pugi::xml_node *arg1 = 0 ;
  lsl::xml_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(pugi::xml_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "pugi::xml_node const & reference is null");
    return 0;
  } 
  result = (lsl::xml_element *)new lsl::xml_element((pugi::xml_node const &)*arg1);
  *(lsl::xml_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1first_1child(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = ((lsl::xml_element const *)arg1)->first_child();
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1last_1child(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = ((lsl::xml_element const *)arg1)->last_child();
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1next_1sibling_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = ((lsl::xml_element const *)arg1)->next_sibling();
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1previous_1sibling_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = ((lsl::xml_element const *)arg1)->previous_sibling();
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = ((lsl::xml_element const *)arg1)->parent();
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1child(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ((lsl::xml_element const *)arg1)->child((char const *)arg2);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1next_1sibling_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ((lsl::xml_element const *)arg1)->next_sibling((char const *)arg2);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1previous_1sibling_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ((lsl::xml_element const *)arg1)->previous_sibling((char const *)arg2);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = (bool)((lsl::xml_element const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1is_1text(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = (bool)((lsl::xml_element const *)arg1)->is_text();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = (char *)((lsl::xml_element const *)arg1)->name();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = (char *)((lsl::xml_element const *)arg1)->value();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1child_1value_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = (char *)((lsl::xml_element const *)arg1)->child_value();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1child_1value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)((lsl::xml_element const *)arg1)->child_value((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1append_1child_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (arg1)->append_child_value((char const *)arg2,(char const *)arg3);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1prepend_1child_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (arg1)->prepend_child_value((char const *)arg2,(char const *)arg3);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1set_1child_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->set_child_value((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->set_name((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1set_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->set_value((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1append_1child(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->append_child((char const *)arg2);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1prepend_1child(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->prepend_child((char const *)arg2);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1append_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element *arg2 = 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = *(lsl::xml_element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::xml_element const & reference is null");
    return 0;
  } 
  result = (arg1)->append_copy((lsl::xml_element const &)*arg2);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1prepend_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element *arg2 = 0 ;
  lsl::xml_element result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = *(lsl::xml_element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::xml_element const & reference is null");
    return 0;
  } 
  result = (arg1)->prepend_copy((lsl::xml_element const &)*arg2);
  *(lsl::xml_element **)&jresult = new lsl::xml_element((const lsl::xml_element &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1remove_1child_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remove_child((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1remove_1child_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  lsl::xml_element *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  arg2 = *(lsl::xml_element **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lsl::xml_element const & reference is null");
    return ;
  } 
  (arg1)->remove_child((lsl::xml_element const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_xml_1element_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  pugi::xml_node_struct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lsl::xml_element **)&jarg1; 
  result = (pugi::xml_node_struct *)(arg1)->ptr();
  *(pugi::xml_node_struct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1xml_1element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lsl::xml_element *arg1 = (lsl::xml_element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lsl::xml_element **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1lost_1error(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  lsl::lost_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (lsl::lost_error *)new lsl::lost_error((std::string const &)*arg1);
  *(lsl::lost_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1lost_1error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lsl::lost_error *arg1 = (lsl::lost_error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lsl::lost_error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1timeout_1error(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  lsl::timeout_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (lsl::timeout_error *)new lsl::timeout_error((std::string const &)*arg1);
  *(lsl::timeout_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1timeout_1error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  lsl::timeout_error *arg1 = (lsl::timeout_error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(lsl::timeout_error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorf_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< float >::size_type)jarg1; 
  result = (std::vector< float > *)new std::vector< float >(arg1);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1vectorf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1vectord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorl_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long > *)new std::vector< long >();
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long >::size_type arg1 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long >::size_type)jarg1; 
  result = (std::vector< long > *)new std::vector< long >(arg1);
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (std::vector< long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = (bool)((std::vector< long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  std::vector< long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  temp2 = (std::vector< long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  std::vector< long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1vectorl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectori_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectori_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectori_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1vectori(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectors_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< short > *)new std::vector< short >();
  *(std::vector< short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectors_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< short >::size_type arg1 ;
  std::vector< short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< short >::size_type)jarg1; 
  result = (std::vector< short > *)new std::vector< short >(arg1);
  *(std::vector< short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  result = ((std::vector< short > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  result = ((std::vector< short > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  arg2 = (std::vector< short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  result = (bool)((std::vector< short > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::value_type *arg2 = 0 ;
  std::vector< short >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  temp2 = (std::vector< short >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< short >::value_type const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  std::vector< short >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< short >::value_type *) &std_vector_Sl_short_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  std::vector< short >::value_type *arg3 = 0 ;
  std::vector< short >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_short_Sg__set(arg1,arg2,(short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1vectors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorstr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorstr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorstr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1vectorstr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorinfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< lsl::stream_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< lsl::stream_info > *)new std::vector< lsl::stream_info >();
  *(std::vector< lsl::stream_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_new_1vectorinfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< lsl::stream_info >::size_type arg1 ;
  std::vector< lsl::stream_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< lsl::stream_info >::size_type)jarg1; 
  result = (std::vector< lsl::stream_info > *)new std::vector< lsl::stream_info >(arg1);
  *(std::vector< lsl::stream_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  std::vector< lsl::stream_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  result = ((std::vector< lsl::stream_info > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  std::vector< lsl::stream_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  result = ((std::vector< lsl::stream_info > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  std::vector< lsl::stream_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  arg2 = (std::vector< lsl::stream_info >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  result = (bool)((std::vector< lsl::stream_info > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  std::vector< lsl::stream_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  arg2 = *(std::vector< lsl::stream_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< lsl::stream_info >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< lsl::stream_info >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  int arg2 ;
  std::vector< lsl::stream_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< lsl::stream_info >::value_type *) &std_vector_Sl_lsl_stream_info_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< lsl::stream_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_vectorinfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  int arg2 ;
  std::vector< lsl::stream_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< lsl::stream_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< lsl::stream_info >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_lsl_stream_info_Sg__set(arg1,arg2,(lsl::stream_info const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_example_hellojni_lslAndroidJNI_delete_1vectorinfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< lsl::stream_info > *arg1 = (std::vector< lsl::stream_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< lsl::stream_info > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

